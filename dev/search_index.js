var documenterSearchIndex = {"docs": [

{
    "location": "#",
    "page": "Home",
    "title": "Home",
    "category": "page",
    "text": ""
},

{
    "location": "#julia-python-snippets-1",
    "page": "Home",
    "title": "julia-python-snippets",
    "category": "section",
    "text": "This document is generated by using Julia:VERSIONand Python:using PyCall\npy\"\"\"\nimport sys\nimport numpy\n\"\"\"\nprintln(\"Python version:\")\nprintln(py\"sys.version\")\nprintln(\"Numpy version:\")\nprintln(py\"numpy.__version__\")"
},

{
    "location": "arrays/#",
    "page": "Arrays",
    "title": "Arrays",
    "category": "page",
    "text": ""
},

{
    "location": "arrays/#Arrays-1",
    "page": "Arrays",
    "title": "Arrays",
    "category": "section",
    "text": ""
},

{
    "location": "arrays/#Zeros,-ones,-empty,-similar-1",
    "page": "Arrays",
    "title": "Zeros, ones, empty, similar",
    "category": "section",
    "text": "a0 = zeros(3)\na1 = ones(Int, 2, 1)\na2 = Array{Float32}(undef, 5)\na3 = similar(a0)\nnothing # hideusing JuliaPythonSnippets\n@named zeros_ones_empty begin\npyexample\"\"\"\nimport numpy\na0 = numpy.zeros(3)\na1 = numpy.ones((2, 1), dtype=int)\na2 = numpy.empty(5, dtype=\"f4\")\na3 = numpy.empty_like(a0)\n\"\"\"\nend"
},

{
    "location": "arrays/#eltype-/-.dtype-1",
    "page": "Arrays",
    "title": "eltype / .dtype",
    "category": "section",
    "text": "@assert eltype(a0) == eltype(a3) == Float64\n@assert eltype(a1) == Int\n@assert eltype(a2) == Float32using JuliaPythonSnippets\n@named zeros_ones_empty begin\npyexample\"\"\"\nassert a0.dtype == a3.dtype == float\nassert a1.dtype == int\nassert a2.dtype == numpy.dtype(\"f4\")\n\"\"\"\nend"
},

{
    "location": "arrays/#Comparison-1",
    "page": "Arrays",
    "title": "Comparison",
    "category": "section",
    "text": "@assert a0 == zero(a0)\n@assert all(a0 .== 0)using JuliaPythonSnippets\n@named zeros_ones_empty begin\npyexample\"\"\"\nassert (a0 == numpy.zeros_like(a0)).all()\nassert (a0 == 0).all()\n\"\"\"\nend"
},

{
    "location": "arrays/#Indexing-1",
    "page": "Arrays",
    "title": "Indexing",
    "category": "section",
    "text": "Indexing · Multi-dimensional Arrays · The Julia Language\nSupported index types · Multi-dimensional Arrays · The Julia Language\nIndexing — NumPy User Guide\nIndexing — NumPy Manualx0 = reshape(1:6, 2, 3)using JuliaPythonSnippets\n@named indexing_1 begin\npyexample\"\"\"\nimport numpy\nx0 = numpy.arange(1, 7).reshape(3, 2).T\n\"\"\"\nendusing JuliaPythonSnippets\n@named indexing_1 pyshow\"x0\"using JuliaPythonSnippets                                            # hide\n@assert x0 == @named indexing_1 py\"x0\"                               # hide\nnothing                                                              # hide"
},

{
    "location": "arrays/#Cartesian-indexing-1",
    "page": "Arrays",
    "title": "Cartesian indexing",
    "category": "section",
    "text": "x1 = x0[CartesianIndex.([1, 2], [1, 3])]using JuliaPythonSnippets\n@named indexing_1 begin\npyexample\"\"\"\nx1 = x0[[0, 1], [0, 2]]\n\"\"\"\nendusing JuliaPythonSnippets\n@named indexing_1 pyshow\"x1\"using JuliaPythonSnippets                                            # hide\n@assert x1 == @named indexing_1 py\"x1\"                               # hide\nnothing                                                              # hide"
},

{
    "location": "arrays/#APL-indexing-1",
    "page": "Arrays",
    "title": "APL indexing",
    "category": "section",
    "text": "x2 = x0[[1, 2], [1, 3]]using JuliaPythonSnippets\n@named indexing_1 begin\npyexample\"\"\"\nx2 = x0[numpy.ix_([0, 1], [0, 2])]\nx2_equivalent = x0[[[0], [1]], [[0, 2]]]\nassert (x2 == x2_equivalent).all()\nx2\n\"\"\"\nendusing JuliaPythonSnippets\n@named indexing_1 pyshow\"x2\"using JuliaPythonSnippets                                            # hide\n@assert x2 == @named indexing_1 py\"x2\"                               # hide\nnothing                                                              # hidenumpy.ix_ — NumPy Manual"
},

{
    "location": "arrays/#Boolean-indexing-1",
    "page": "Arrays",
    "title": "Boolean indexing",
    "category": "section",
    "text": "x3 = x0[x0 .% 2 .== 0]using JuliaPythonSnippets\n@named indexing_1 begin\npyexample\"\"\"\nx3 = x0[x0 % 2 == 0]\n\"\"\"\nendusing JuliaPythonSnippets\n@named indexing_1 pyshow\"x3\"using JuliaPythonSnippets                                            # hide\n@assert x3 == @named indexing_1 py\"x3\"                               # hide\nnothing                                                              # hide"
},

{
    "location": "introspection/#",
    "page": "Introspection",
    "title": "Introspection",
    "category": "page",
    "text": ""
},

{
    "location": "introspection/#Introspection-1",
    "page": "Introspection",
    "title": "Introspection",
    "category": "section",
    "text": "Reflection and introspection · The Julia Language\nBuilt-in Functions — Python 3 documentation\n3. Data model — Python 3 documentation"
},

{
    "location": "introspection/#isa-/-isinstance-1",
    "page": "Introspection",
    "title": "isa / isinstance",
    "category": "section",
    "text": "@assert (1, 2, 3) isa Tupleusing JuliaPythonSnippets\npyexample\"\"\"\nassert isinstance((1, 2, 3), tuple)\n\"\"\""
},

{
    "location": "introspection/#:-/-issubtype-1",
    "page": "Introspection",
    "title": "<: / issubtype",
    "category": "section",
    "text": "@assert Tuple <: Anyusing JuliaPythonSnippets\npyexample\"\"\"\nassert issubclass(tuple, object)\n\"\"\""
},

{
    "location": "introspection/#typeof-/-type-1",
    "page": "Introspection",
    "title": "typeof / type",
    "category": "section",
    "text": "@assert typeof((1, 2, 3)) <: Tupleusing JuliaPythonSnippets\npyexample\"\"\"\nassert type((1, 2, 3)) == tuple\n\"\"\""
},

{
    "location": "introspection/#Properties-and-fields-1",
    "page": "Introspection",
    "title": "Properties and fields",
    "category": "section",
    "text": "mutable struct ObjectWithProperties\n    alpha\n    beta\nend\n\nobj = ObjectWithProperties(1, 2)\n\n@assert propertynames(obj) == (:alpha, :beta)\n@assert fieldnames(ObjectWithProperties) == (:alpha, :beta)\n\n@assert getproperty(obj, :alpha) == 1\n@assert getfield(obj, :beta) == 2\n\nsetproperty!(obj, :alpha, 10); @assert obj.alpha == 10\nsetfield!(obj, :beta, 20); @assert obj.beta == 20using JuliaPythonSnippets\npyexample\"\"\"\nclass ObjectWithProperties:\n    alpha = 1\n    beta = 2\n\nobj = ObjectWithProperties()\n\nassert set(dir(obj)) >= {\"alpha\", \"beta\"}\nassert set(dir(ObjectWithProperties)) >= {\"alpha\", \"beta\"}\n\nassert getattr(obj, \"alpha\") == 1\n\nsetattr(obj, \"beta\", 20); assert obj.beta == 20\n\"\"\""
},

{
    "location": "introspection/#Locals-1",
    "page": "Introspection",
    "title": "Locals",
    "category": "section",
    "text": "f(a, b) = Base.@locals\n@assert f(1, 2) == Dict(:a => 1, :b => 2)using JuliaPythonSnippets\npyexample\"\"\"\ndef f(a, b):\n    return locals()\n\nassert f(1, 2) == dict(a=1, b=2)\n\"\"\""
},

{
    "location": "introspection/#Globals-1",
    "page": "Introspection",
    "title": "Globals",
    "category": "section",
    "text": "m = Module(:SomeModule)\nBase.eval(m, quote\n    function f()\n        names(@__MODULE__, all=true)\n    end\nend)\n@assert Set(names(m, all=true)) >= Set([:SomeModule, :f])\n@assert Set(m.f()) >= Set([:SomeModule, :f])using JuliaPythonSnippets\npyexample\"\"\"\nimport types\nm = types.ModuleType(\"SomeModule\")\nexec(\'\'\'\ndef f():\n    return list(globals())\n\'\'\', vars(m))\n\nassert set(vars(m)) >= {\"__name__\", \"__doc__\"}\nassert set(m.f()) >= {\"__name__\", \"__doc__\"}\n\"\"\""
},

]}
